# Mapping values
snippet map
	((${1:/2}) <$> ${2:sinewave1})
endsnippet

# degradeBy
snippet degradeby
	degradeBy ${1:0.9}
endsnippet

# stack
snippet stack
	stack[
	${1:d1 $ sound "808bd",}
	${2:d1 $ sound "808bd"}
	]
endsnippet	

# cat 
snippet cat 
	cat[
	${1:d1 $ sound "808bd",}
	${2:d1 $ sound "808bd"}
	]
endsnippet	

# slowcat 
snippet slowcat 
	slowcat[
	${1:d1 $ sound "808bd",}
	${2:d1 $ sound "808bd"}
	]
endsnippet	

# randcat 
snippet randcat 
	randcat[
	${1:d1 $ sound "808bd",}
	${2:d1 $ sound "808bd"}
	]
endsnippet	

# fit
snippet fit
	(fit ${1:9} ["${2:folder1}","${3:folder2}", "${4:folder3}"] "${5:1/3 3*2 0}")
endsnippet	

# fit'
snippet fitprime
	(fit' ${1:3} ${2:2} "${3:1 3 2 1}" "${4:3 2 5 0"} ${5:"folder1 folder2 folder3}")
endsnippet	

# superimpose
snippet superimpose
	superimpose (${1:density 4}) 
endsnippet

# spread
snippet spread
	${1:spread} ${2:density} [${3:3}, ${4:3%5}] 
endsnippet

# within
snippet within
	within (${1:0},${2:0.5}) (${3:density 2})
endsnippet	

# runwith
snippet runwith
	runWith ${1:2} (${2:density 3})
endsnippet	

# runwith'
snippet runwithprime
	runWith' ${1:2} (${2:density 3})
endsnippet	

# weave
snippet weave
	weave ${1:16} (${2:shape sine1  # speed sine}) 
	[
	${3:sound "909bd*4",} 
	${4:sound "909hh*2"}
	]
endsnippet	

# weave'
snippet weaveprime
	weave' ${1:16} (sound "${2:808bd 808sd}") 
	[
	${3:density 2,} 
	${4:iter 8,} 
	${5:(pan sine #)}
	]
endsnippet	

# HASKELL STUFF #

# List operations
snippet listoperations
	-- HASKELL LIST OPERATIONS
	--head [1..10]
	--last [1..10]
	--tail [1..10]
	--init [1..10]
	--length [1..10]
	--null [1..10]
	--null []
	--take 3 [1..10]
	--drop 3 [1..10]
	--maximum [1..10]
	--minimum [1..10]
	--sum [1..10]
	--product [1..10]
	--10 `elem` [1..10]
	--transpose [[1,2,3], [4,5,6], [7,8,9]]
	--sort [2,5,1,63,2]
	--intersect [1..7] [5..10]
endsnippet

# List comprehension
snippet listcomprehension
	[${1:x*2} | x <- [${2:0.1, 0.2 .. 1.0}]]
endsnippet

# Lambda
snippet lambda

endsnippet
